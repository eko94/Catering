// <auto-generated />
using System;
using Catering.Infrastructure.StoredModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Catering.Infrastructure.Migrations
{
    [DbContext(typeof(StoredDbContext))]
    [Migration("20250628230917_AddContratoInOrdenFinalizada")]
    partial class AddContratoInOrdenFinalizada
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.ClienteStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCliente");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Cliente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b971b55-e539-4939-9240-825a48402329"),
                            Nombre = "Cliente Test"
                        });
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.ComidaStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdComida");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Estado");

                    b.Property<Guid?>("IdCliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdContrato")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdOrdenTrabajo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdContrato");

                    b.HasIndex("IdOrdenTrabajo");

                    b.ToTable("Comida");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.ContratoEntregaCanceladaStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdContratoEntregaCancelada");

                    b.Property<DateTime>("FechaCancelada")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaCancelada");

                    b.Property<Guid>("IdContrato")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdContrato");

                    b.ToTable("ContratoEntregaCancelada");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.ContratoStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdContrato");

                    b.Property<int>("DiasContratados")
                        .HasColumnType("int")
                        .HasColumnName("DiasContratados");

                    b.Property<int>("DiasRealizados")
                        .HasColumnType("int")
                        .HasColumnName("DiasRealizados");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Estado");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaInicio");

                    b.Property<DateTime?>("FechaUltimoRealizado")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaUltimoRealizado");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPlanAlimentario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdPlanAlimentario");

                    b.ToTable("Contrato");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5faf7842-e7b5-4a3f-96c8-7719d01748b9"),
                            DiasContratados = 15,
                            DiasRealizados = 0,
                            Estado = "Iniciado",
                            FechaInicio = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            IdCliente = new Guid("9b971b55-e539-4939-9240-825a48402329"),
                            IdPlanAlimentario = new Guid("b1c8f0d2-3c4e-4f5a-9b6c-7d8e9f0a1b2c")
                        });
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.IngredienteStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdIngrediente");

                    b.Property<decimal>("CostoCompra")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("CostoCompra");

                    b.Property<decimal>("CostoVenta")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("CostoVenta");

                    b.Property<string>("Medicion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Medicion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Nombre");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Ingrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f05cab9-29e6-4925-8e81-1260aa818163"),
                            CostoCompra = 10.0m,
                            CostoVenta = 15.0m,
                            Medicion = "kg",
                            Nombre = "Brócoli",
                            Tipo = "Verdura"
                        },
                        new
                        {
                            Id = new Guid("93cabbc2-39a2-491e-a10d-7a1ca5fbf844"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Zanahoria",
                            Tipo = "Verdura"
                        },
                        new
                        {
                            Id = new Guid("c0865709-e77d-427a-bb00-f10d83de6a6f"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Nueces",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("35d116a9-83bd-49ae-a238-efb9070ca882"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "litro",
                            Nombre = "Aceite de oliva",
                            Tipo = "Aceite"
                        },
                        new
                        {
                            Id = new Guid("3dcd17d6-5ce4-4c9d-8c1f-f61a96a45954"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Limón",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("b0810fd3-fbbc-4e09-a842-f166d0e02003"),
                            CostoCompra = 10.0m,
                            CostoVenta = 15.0m,
                            Medicion = "kg",
                            Nombre = "Fideos",
                            Tipo = "Verdura"
                        },
                        new
                        {
                            Id = new Guid("e991e259-b090-4db7-bf72-c1782d9c32ee"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Hongos",
                            Tipo = "Verdura"
                        },
                        new
                        {
                            Id = new Guid("7cc521ec-495e-4a08-9e46-2f226ddc4979"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Langostinos",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("c5a5a200-b9aa-4ef8-b631-e959c325b5cb"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "litro",
                            Nombre = "Ajo",
                            Tipo = "Aceite"
                        },
                        new
                        {
                            Id = new Guid("55f73b90-e5c0-4153-9f4c-b5b688544da3"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Huevos",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("d0061839-d9ad-46ba-afea-d0616dbca20f"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Lentejas",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("3ca2ff52-e9c6-4c31-bc4e-9b2cd28049ef"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Calabaza",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("a2049b76-cd7f-4bf6-a44f-90117fc7d7da"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Almendras",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("c957043d-fdd7-41e2-8943-d847f2b56d60"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Aceite de oliva",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("84c48d2c-842d-4b0d-8c9b-3264499f0f0f"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Sal",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("ddb6572c-f24c-48cd-985e-d81442db791f"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Apio",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("582b7a4d-541b-4021-9b7b-8dbdbf73342e"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Zanahoria",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("586963c6-d514-4789-8e6a-0055b7fed7cd"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Puerro",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("e833429e-daee-4a9a-8625-cd0fef7d495d"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Cebolla",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("1ba2a2b1-d3b4-44e3-844d-823eae6c8411"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Tomillo",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("bb206655-96ff-4933-a915-32bfc788a345"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Cuscús",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("9088fd3a-e9d2-4583-a02a-f57c075cfe9c"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Pechuga de pollo",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("7e5b6430-1dff-4a4f-8c0d-60f37d87f1e7"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Pimiento verde",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("a934eaab-d760-4151-9f10-7041151768e7"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Calabacín",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("e6b8015b-afde-42c1-b9f8-85287f5cfe7c"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Cúrcuma",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("9d77a61e-4404-4f08-ae91-6bbdc1ab4d46"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Cebolla",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("a2c4c8b3-3209-4a28-aa2c-520101a95ee2"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Zanahoria",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("975049c9-74e8-42d1-a94f-5faf49b8590f"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Brócoli",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("8b8b18b3-3783-415b-a6f8-09d53a8d4dfc"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Jengibre fresco",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("2f270869-7d88-4607-b394-db1f84c55322"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "lt",
                            Nombre = "Caldo de pollo bajo en sodio",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("5c795374-da7d-4a04-ad2d-65a2c9aa66b9"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Pan integral",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("9748fd84-f80f-4e23-9aa4-74ca5a508be3"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Palta",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("07e45ecc-4ed6-4372-bf7f-44f00ccca281"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Huevo",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("01b72770-ae8c-4388-9a18-cfd640e1d8c8"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Queso parmesano",
                            Tipo = "Fruta"
                        },
                        new
                        {
                            Id = new Guid("ae4502e0-c112-43f8-abd0-eaa0e5e2e707"),
                            CostoCompra = 5.0m,
                            CostoVenta = 8.0m,
                            Medicion = "kg",
                            Nombre = "Hierbas frescas",
                            Tipo = "Fruta"
                        });
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.OrdenTrabajoClienteStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdOrdenTrabajoCliente");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdContrato")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrdenTrabajo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdContrato");

                    b.HasIndex("IdOrdenTrabajo");

                    b.ToTable("OrdenTrabajoCliente");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.OrdenTrabajoStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdOrdenTrabajo");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Estado");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaCreado");

                    b.Property<Guid>("IdReceta")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuarioCocinero")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("IdReceta");

                    b.HasIndex("IdUsuarioCocinero");

                    b.ToTable("OrdenTrabajo");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.PlanAlimentarioRecetaStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdPlanAlimentarioReceta");

                    b.Property<int>("Dia")
                        .HasColumnType("int")
                        .HasColumnName("Dia");

                    b.Property<Guid>("IdPlanAlimentario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdReceta")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdPlanAlimentario");

                    b.HasIndex("IdReceta");

                    b.ToTable("PlanAlimentarioReceta");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.PlanAlimentarioStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdPlanAlimentario");

                    b.Property<int>("CantidadDias")
                        .HasColumnType("int")
                        .HasColumnName("CantidadDias");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Nombre");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.ToTable("PlanAlimentario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1c8f0d2-3c4e-4f5a-9b6c-7d8e9f0a1b2c"),
                            CantidadDias = 15,
                            Nombre = "Plan Alimentario Test",
                            Tipo = "Tipo del plan alimentario test"
                        });
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.RecetaIngredienteStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdRecetaIngrediente");

                    b.Property<double>("Cantidad")
                        .HasColumnType("float")
                        .HasColumnName("Cantidad");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Detalle");

                    b.Property<Guid>("IdIngrediente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdReceta")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdIngrediente");

                    b.HasIndex("IdReceta");

                    b.ToTable("RecetaIngrediente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("024295a8-ee8d-4d68-95ad-29a6a530f804"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("0f05cab9-29e6-4925-8e81-1260aa818163"),
                            IdReceta = new Guid("38b29f41-0757-4f98-af43-84394606eb03")
                        },
                        new
                        {
                            Id = new Guid("7dc93e3d-2538-494a-abb1-a71552bea199"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("93cabbc2-39a2-491e-a10d-7a1ca5fbf844"),
                            IdReceta = new Guid("38b29f41-0757-4f98-af43-84394606eb03")
                        },
                        new
                        {
                            Id = new Guid("aa265174-8580-49ab-9a78-6ce010666833"),
                            Cantidad = 2.0,
                            Detalle = "",
                            IdIngrediente = new Guid("c0865709-e77d-427a-bb00-f10d83de6a6f"),
                            IdReceta = new Guid("38b29f41-0757-4f98-af43-84394606eb03")
                        },
                        new
                        {
                            Id = new Guid("326e4375-ee15-45f6-b005-2304c61a81c2"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("35d116a9-83bd-49ae-a238-efb9070ca882"),
                            IdReceta = new Guid("38b29f41-0757-4f98-af43-84394606eb03")
                        },
                        new
                        {
                            Id = new Guid("17fbfe8a-58aa-4330-8d9c-ffd86e058380"),
                            Cantidad = 2.0,
                            Detalle = "",
                            IdIngrediente = new Guid("3dcd17d6-5ce4-4c9d-8c1f-f61a96a45954"),
                            IdReceta = new Guid("38b29f41-0757-4f98-af43-84394606eb03")
                        },
                        new
                        {
                            Id = new Guid("9272e1cd-5f09-44ee-abd4-ddbafc9bf0b4"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("b0810fd3-fbbc-4e09-a842-f166d0e02003"),
                            IdReceta = new Guid("3d906ea7-e3a3-480d-b2ce-5b4f7586f227")
                        },
                        new
                        {
                            Id = new Guid("f4e8350b-08cd-4cce-81c0-637f6bcb4af4"),
                            Cantidad = 2.0,
                            Detalle = "",
                            IdIngrediente = new Guid("e991e259-b090-4db7-bf72-c1782d9c32ee"),
                            IdReceta = new Guid("3d906ea7-e3a3-480d-b2ce-5b4f7586f227")
                        },
                        new
                        {
                            Id = new Guid("4578a298-7e95-4990-8852-3477bf92cc9c"),
                            Cantidad = 2.0,
                            Detalle = "",
                            IdIngrediente = new Guid("7cc521ec-495e-4a08-9e46-2f226ddc4979"),
                            IdReceta = new Guid("3d906ea7-e3a3-480d-b2ce-5b4f7586f227")
                        },
                        new
                        {
                            Id = new Guid("e672b853-0453-4c82-b709-38a45e860337"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("c5a5a200-b9aa-4ef8-b631-e959c325b5cb"),
                            IdReceta = new Guid("3d906ea7-e3a3-480d-b2ce-5b4f7586f227")
                        },
                        new
                        {
                            Id = new Guid("d170edb5-bbaf-4edf-afe5-d2a8c05d380f"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("55f73b90-e5c0-4153-9f4c-b5b688544da3"),
                            IdReceta = new Guid("3d906ea7-e3a3-480d-b2ce-5b4f7586f227")
                        },
                        new
                        {
                            Id = new Guid("793e85e4-553c-4f28-a9d0-0afc376cb185"),
                            Cantidad = 2.0,
                            Detalle = "",
                            IdIngrediente = new Guid("d0061839-d9ad-46ba-afea-d0616dbca20f"),
                            IdReceta = new Guid("7f4423a6-f047-4759-b6be-b9260f9d7e15")
                        },
                        new
                        {
                            Id = new Guid("1f08902e-539d-4bf1-98df-631f194f445d"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("3ca2ff52-e9c6-4c31-bc4e-9b2cd28049ef"),
                            IdReceta = new Guid("7f4423a6-f047-4759-b6be-b9260f9d7e15")
                        },
                        new
                        {
                            Id = new Guid("6a91ff7c-827e-417a-9f4b-06b7d5aad185"),
                            Cantidad = 0.5,
                            Detalle = "",
                            IdIngrediente = new Guid("a2049b76-cd7f-4bf6-a44f-90117fc7d7da"),
                            IdReceta = new Guid("7f4423a6-f047-4759-b6be-b9260f9d7e15")
                        },
                        new
                        {
                            Id = new Guid("b792dc4b-48fa-4d2a-81fb-30b0f2e006f5"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("c957043d-fdd7-41e2-8943-d847f2b56d60"),
                            IdReceta = new Guid("7f4423a6-f047-4759-b6be-b9260f9d7e15")
                        },
                        new
                        {
                            Id = new Guid("d00f5d67-5cf2-459f-b3f5-e1630958f9a0"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("84c48d2c-842d-4b0d-8c9b-3264499f0f0f"),
                            IdReceta = new Guid("7f4423a6-f047-4759-b6be-b9260f9d7e15")
                        },
                        new
                        {
                            Id = new Guid("1e930973-4336-4866-9943-8c47a29ad462"),
                            Cantidad = 2.0,
                            Detalle = "",
                            IdIngrediente = new Guid("ddb6572c-f24c-48cd-985e-d81442db791f"),
                            IdReceta = new Guid("acf9388f-1ae9-4888-871a-720651408cf7")
                        },
                        new
                        {
                            Id = new Guid("c2b7d7cb-7797-4ce2-b2cd-e2eebd367045"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("582b7a4d-541b-4021-9b7b-8dbdbf73342e"),
                            IdReceta = new Guid("acf9388f-1ae9-4888-871a-720651408cf7")
                        },
                        new
                        {
                            Id = new Guid("6f700eb6-4c1b-474a-9577-eb6d53720e45"),
                            Cantidad = 0.5,
                            Detalle = "",
                            IdIngrediente = new Guid("586963c6-d514-4789-8e6a-0055b7fed7cd"),
                            IdReceta = new Guid("acf9388f-1ae9-4888-871a-720651408cf7")
                        },
                        new
                        {
                            Id = new Guid("ea250c7d-630c-4dfe-b77e-141d8ccdd5ec"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("e833429e-daee-4a9a-8625-cd0fef7d495d"),
                            IdReceta = new Guid("acf9388f-1ae9-4888-871a-720651408cf7")
                        },
                        new
                        {
                            Id = new Guid("c8c8451f-d087-4c79-af03-a84efe53d048"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("1ba2a2b1-d3b4-44e3-844d-823eae6c8411"),
                            IdReceta = new Guid("acf9388f-1ae9-4888-871a-720651408cf7")
                        },
                        new
                        {
                            Id = new Guid("70b624f9-c252-4031-8b55-9cecf0b7fc01"),
                            Cantidad = 2.0,
                            Detalle = "",
                            IdIngrediente = new Guid("bb206655-96ff-4933-a915-32bfc788a345"),
                            IdReceta = new Guid("3aa49abb-9458-4097-8bc0-70118fe7e9f2")
                        },
                        new
                        {
                            Id = new Guid("cff5519c-aac0-4156-9610-6efec7c5eda1"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("9088fd3a-e9d2-4583-a02a-f57c075cfe9c"),
                            IdReceta = new Guid("3aa49abb-9458-4097-8bc0-70118fe7e9f2")
                        },
                        new
                        {
                            Id = new Guid("85965ca5-55ba-4f19-99a9-a72cb3837aa2"),
                            Cantidad = 0.5,
                            Detalle = "",
                            IdIngrediente = new Guid("7e5b6430-1dff-4a4f-8c0d-60f37d87f1e7"),
                            IdReceta = new Guid("3aa49abb-9458-4097-8bc0-70118fe7e9f2")
                        },
                        new
                        {
                            Id = new Guid("9647c2c6-b72d-4f3b-b2ea-3a3b1b3887e0"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("a934eaab-d760-4151-9f10-7041151768e7"),
                            IdReceta = new Guid("3aa49abb-9458-4097-8bc0-70118fe7e9f2")
                        },
                        new
                        {
                            Id = new Guid("8abc08f4-3959-45dc-874b-74c035c09173"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("e6b8015b-afde-42c1-b9f8-85287f5cfe7c"),
                            IdReceta = new Guid("3aa49abb-9458-4097-8bc0-70118fe7e9f2")
                        },
                        new
                        {
                            Id = new Guid("1a809aa1-bfd1-4c5e-bbc7-9ad0f99c9561"),
                            Cantidad = 2.0,
                            Detalle = "",
                            IdIngrediente = new Guid("9d77a61e-4404-4f08-ae91-6bbdc1ab4d46"),
                            IdReceta = new Guid("0c18e665-5a64-4ba3-8903-999bb5c50d04")
                        },
                        new
                        {
                            Id = new Guid("881b7716-ef49-4d19-b13b-faccbf8a33ea"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("a2c4c8b3-3209-4a28-aa2c-520101a95ee2"),
                            IdReceta = new Guid("0c18e665-5a64-4ba3-8903-999bb5c50d04")
                        },
                        new
                        {
                            Id = new Guid("2377e2de-6966-434c-9fbb-2206c0eafebc"),
                            Cantidad = 0.5,
                            Detalle = "",
                            IdIngrediente = new Guid("975049c9-74e8-42d1-a94f-5faf49b8590f"),
                            IdReceta = new Guid("0c18e665-5a64-4ba3-8903-999bb5c50d04")
                        },
                        new
                        {
                            Id = new Guid("a3ed9326-30d1-42f9-b0bb-3647487a2055"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("8b8b18b3-3783-415b-a6f8-09d53a8d4dfc"),
                            IdReceta = new Guid("0c18e665-5a64-4ba3-8903-999bb5c50d04")
                        },
                        new
                        {
                            Id = new Guid("1d440379-abff-48bf-b3fe-2be1f2bc7ea1"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("2f270869-7d88-4607-b394-db1f84c55322"),
                            IdReceta = new Guid("0c18e665-5a64-4ba3-8903-999bb5c50d04")
                        },
                        new
                        {
                            Id = new Guid("72e7875e-642b-4645-9541-6621d38ee57a"),
                            Cantidad = 2.0,
                            Detalle = "",
                            IdIngrediente = new Guid("5c795374-da7d-4a04-ad2d-65a2c9aa66b9"),
                            IdReceta = new Guid("faac0c33-64f8-4c92-840b-5c0d708719df")
                        },
                        new
                        {
                            Id = new Guid("426c988f-5929-4819-a81e-17cf6d7c130c"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("9748fd84-f80f-4e23-9aa4-74ca5a508be3"),
                            IdReceta = new Guid("faac0c33-64f8-4c92-840b-5c0d708719df")
                        },
                        new
                        {
                            Id = new Guid("d9f48ffb-2348-49da-a5e3-e2a7e20c2ef5"),
                            Cantidad = 0.5,
                            Detalle = "",
                            IdIngrediente = new Guid("07e45ecc-4ed6-4372-bf7f-44f00ccca281"),
                            IdReceta = new Guid("faac0c33-64f8-4c92-840b-5c0d708719df")
                        },
                        new
                        {
                            Id = new Guid("a76a0673-22de-4686-a912-634e775d3834"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("01b72770-ae8c-4388-9a18-cfd640e1d8c8"),
                            IdReceta = new Guid("faac0c33-64f8-4c92-840b-5c0d708719df")
                        },
                        new
                        {
                            Id = new Guid("0f41312d-5374-40be-998b-c2bf1e6439ac"),
                            Cantidad = 1.0,
                            Detalle = "",
                            IdIngrediente = new Guid("ae4502e0-c112-43f8-abd0-eaa0e5e2e707"),
                            IdReceta = new Guid("faac0c33-64f8-4c92-840b-5c0d708719df")
                        });
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.RecetaInstruccionStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdRecetaInstruccion");

                    b.Property<Guid>("IdReceta")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Instruccion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Instruccion");

                    b.HasKey("Id");

                    b.HasIndex("IdReceta");

                    b.ToTable("RecetaInstruccion");

                    b.HasData(
                        new
                        {
                            Id = new Guid("100bebed-e933-40c6-b81a-ce31f9aa5a38"),
                            IdReceta = new Guid("38b29f41-0757-4f98-af43-84394606eb03"),
                            Instruccion = "1. Cocina el brócoli en agua con sal durante 5 minutos."
                        },
                        new
                        {
                            Id = new Guid("2c9a25fc-1ef1-4ba6-b0c0-f5b5ba507e00"),
                            IdReceta = new Guid("38b29f41-0757-4f98-af43-84394606eb03"),
                            Instruccion = "2. Ralla la zanahoria y mézclala con el brócoli."
                        },
                        new
                        {
                            Id = new Guid("e0484bba-57b1-4eae-a826-6d5f676bc37d"),
                            IdReceta = new Guid("38b29f41-0757-4f98-af43-84394606eb03"),
                            Instruccion = "3. Prepara una vinagreta con aceite de oliva y limón."
                        },
                        new
                        {
                            Id = new Guid("5bc31749-9881-4d75-931e-c354d5bdb1e7"),
                            IdReceta = new Guid("38b29f41-0757-4f98-af43-84394606eb03"),
                            Instruccion = "4. Pica las nueces y agrégalas a la ensalada."
                        },
                        new
                        {
                            Id = new Guid("4d6f0cb5-3fc0-4fe3-b7b9-5fc104fc8855"),
                            IdReceta = new Guid("3d906ea7-e3a3-480d-b2ce-5b4f7586f227"),
                            Instruccion = "1. Cocina los fideos en agua hirviendo."
                        },
                        new
                        {
                            Id = new Guid("ef558fe6-99d5-41c3-b59c-d3795faba4ec"),
                            IdReceta = new Guid("3d906ea7-e3a3-480d-b2ce-5b4f7586f227"),
                            Instruccion = "2. Dora el ajo en una sartén con aceite."
                        },
                        new
                        {
                            Id = new Guid("3d0377e8-fbf3-4184-a1c7-9126a06bdd13"),
                            IdReceta = new Guid("3d906ea7-e3a3-480d-b2ce-5b4f7586f227"),
                            Instruccion = "3. Agrega los hongos y saltéalos por 10 minutos."
                        },
                        new
                        {
                            Id = new Guid("1c919f00-4e8e-40b3-accc-ecf250542e85"),
                            IdReceta = new Guid("3d906ea7-e3a3-480d-b2ce-5b4f7586f227"),
                            Instruccion = "4. Añade los langostinos y cocina hasta que estén dorados."
                        },
                        new
                        {
                            Id = new Guid("04cb1dd9-7489-46d3-a682-706eb3f1845e"),
                            IdReceta = new Guid("3d906ea7-e3a3-480d-b2ce-5b4f7586f227"),
                            Instruccion = "5. Incorpora los huevos batidos y revuelve hasta que cuajen."
                        },
                        new
                        {
                            Id = new Guid("7232ec6e-8b08-4010-afc3-60c57dc28099"),
                            IdReceta = new Guid("7f4423a6-f047-4759-b6be-b9260f9d7e15"),
                            Instruccion = "1. Cocina la calabaza y mézclala con las lentejas."
                        },
                        new
                        {
                            Id = new Guid("e5720887-3f4e-4f49-828a-c0945d4b03a0"),
                            IdReceta = new Guid("7f4423a6-f047-4759-b6be-b9260f9d7e15"),
                            Instruccion = "2. Pica las almendras y agrégalas."
                        },
                        new
                        {
                            Id = new Guid("3997d976-c7db-4913-9b45-508a92eb8137"),
                            IdReceta = new Guid("7f4423a6-f047-4759-b6be-b9260f9d7e15"),
                            Instruccion = "3. Aliña con aceite de oliva y sal."
                        },
                        new
                        {
                            Id = new Guid("b8d7dda8-5548-45e2-9b8d-dc644c0da0c5"),
                            IdReceta = new Guid("7f4423a6-f047-4759-b6be-b9260f9d7e15"),
                            Instruccion = "4. Sirve con hummus por encima."
                        },
                        new
                        {
                            Id = new Guid("53161d8e-0570-4766-a3f0-f3d4335d933a"),
                            IdReceta = new Guid("acf9388f-1ae9-4888-871a-720651408cf7"),
                            Instruccion = "1. Pela y corta las verduras en trozos pequeños."
                        },
                        new
                        {
                            Id = new Guid("276fb00e-89a2-44e9-8f80-172ac6268557"),
                            IdReceta = new Guid("acf9388f-1ae9-4888-871a-720651408cf7"),
                            Instruccion = "2. Saltea la cebolla y el puerro en una olla con aceite."
                        },
                        new
                        {
                            Id = new Guid("0bbb3d4d-9ade-4751-b831-87594db71991"),
                            IdReceta = new Guid("acf9388f-1ae9-4888-871a-720651408cf7"),
                            Instruccion = "3. Agrega el resto de las verduras y cocina por 5 minutos."
                        },
                        new
                        {
                            Id = new Guid("d86b8da3-21ad-460f-b511-1434b7e334ca"),
                            IdReceta = new Guid("acf9388f-1ae9-4888-871a-720651408cf7"),
                            Instruccion = "4. Añade agua y hierbas aromáticas."
                        },
                        new
                        {
                            Id = new Guid("48b249bb-a41c-4475-b79b-652eaa018088"),
                            IdReceta = new Guid("acf9388f-1ae9-4888-871a-720651408cf7"),
                            Instruccion = "5. Cocina a fuego lento por 15 minutos y cuela el caldo."
                        },
                        new
                        {
                            Id = new Guid("d9a8ba77-5d0e-4ae7-8b7b-44bd15a12feb"),
                            IdReceta = new Guid("3aa49abb-9458-4097-8bc0-70118fe7e9f2"),
                            Instruccion = "1. Cocina el cuscús según las instrucciones del paquete."
                        },
                        new
                        {
                            Id = new Guid("430ab4ab-0cac-4a4c-8898-6d276c9060f4"),
                            IdReceta = new Guid("3aa49abb-9458-4097-8bc0-70118fe7e9f2"),
                            Instruccion = "2. Saltea la cebolla picada hasta que esté dorada."
                        },
                        new
                        {
                            Id = new Guid("0494c609-c170-445e-8245-ccb41b8ca446"),
                            IdReceta = new Guid("3aa49abb-9458-4097-8bc0-70118fe7e9f2"),
                            Instruccion = "3. Agrega el pimiento, calabacín y pollo troceado."
                        },
                        new
                        {
                            Id = new Guid("6a62ea62-2e0e-43ec-bb26-9d4cd5da0948"),
                            IdReceta = new Guid("3aa49abb-9458-4097-8bc0-70118fe7e9f2"),
                            Instruccion = "4. Cocina hasta que el pollo esté bien cocido."
                        },
                        new
                        {
                            Id = new Guid("accf184a-685e-4e69-a22f-d3aabbb0b66d"),
                            IdReceta = new Guid("3aa49abb-9458-4097-8bc0-70118fe7e9f2"),
                            Instruccion = "5. Mezcla con el cuscús y espolvorea cúrcuma."
                        },
                        new
                        {
                            Id = new Guid("e4d71b9d-fc15-475f-a990-dc53948e304d"),
                            IdReceta = new Guid("0c18e665-5a64-4ba3-8903-999bb5c50d04"),
                            Instruccion = "1. Cocina el pollo en una cacerola con un poco de aceite hasta dorarlo."
                        },
                        new
                        {
                            Id = new Guid("904af092-33b4-44bf-a4f3-ee651d745e65"),
                            IdReceta = new Guid("0c18e665-5a64-4ba3-8903-999bb5c50d04"),
                            Instruccion = "2. Agrega la cebolla y zanahoria picadas y sofríe por unos minutos."
                        },
                        new
                        {
                            Id = new Guid("e312e47c-d922-4ce9-87f2-a133c67ca046"),
                            IdReceta = new Guid("0c18e665-5a64-4ba3-8903-999bb5c50d04"),
                            Instruccion = "3. Añade el caldo de pollo y deja hervir."
                        },
                        new
                        {
                            Id = new Guid("bc89fd25-9af3-46fd-a1da-51d9b929218e"),
                            IdReceta = new Guid("0c18e665-5a64-4ba3-8903-999bb5c50d04"),
                            Instruccion = "4. Incorpora el brócoli y el jengibre rallado. Cocina por 10 minutos."
                        },
                        new
                        {
                            Id = new Guid("ab9ae51a-d382-4628-a5be-90e7b297273b"),
                            IdReceta = new Guid("faac0c33-64f8-4c92-840b-5c0d708719df"),
                            Instruccion = "1. Tuesta el pan integral."
                        },
                        new
                        {
                            Id = new Guid("cd67cc06-a8c0-4c71-956e-53234dd9f37e"),
                            IdReceta = new Guid("faac0c33-64f8-4c92-840b-5c0d708719df"),
                            Instruccion = "2. Machaca la palta y úntala sobre el pan."
                        },
                        new
                        {
                            Id = new Guid("a958abfc-674a-4c0b-95c1-6e8527af6427"),
                            IdReceta = new Guid("faac0c33-64f8-4c92-840b-5c0d708719df"),
                            Instruccion = "3. Cocina el huevo escalfado y colócalo encima."
                        },
                        new
                        {
                            Id = new Guid("ec01f0db-b0cc-4295-b442-b797c3dc47df"),
                            IdReceta = new Guid("faac0c33-64f8-4c92-840b-5c0d708719df"),
                            Instruccion = "4. Espolvorea queso parmesano y hierbas frescas."
                        });
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.RecetaStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdReceta");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Receta");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38b29f41-0757-4f98-af43-84394606eb03"),
                            Nombre = "Ensalada de brócoli, zanahoria y nueces"
                        },
                        new
                        {
                            Id = new Guid("3d906ea7-e3a3-480d-b2ce-5b4f7586f227"),
                            Nombre = "Fideos con revuelto de hongos y langostinos"
                        },
                        new
                        {
                            Id = new Guid("7f4423a6-f047-4759-b6be-b9260f9d7e15"),
                            Nombre = "Ensalada de lentejas con calabaza, hummus y almendras"
                        },
                        new
                        {
                            Id = new Guid("acf9388f-1ae9-4888-871a-720651408cf7"),
                            Nombre = "Caldo de verduras rápido"
                        },
                        new
                        {
                            Id = new Guid("3aa49abb-9458-4097-8bc0-70118fe7e9f2"),
                            Nombre = "Cuscús con pollo, verduras y cúrcuma"
                        },
                        new
                        {
                            Id = new Guid("0c18e665-5a64-4ba3-8903-999bb5c50d04"),
                            Nombre = "Sopa de pollo con vegetales"
                        },
                        new
                        {
                            Id = new Guid("faac0c33-64f8-4c92-840b-5c0d708719df"),
                            Nombre = "Tostada con palta y huevo escalfado"
                        });
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.UsuarioStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdUsuario");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d19a0e52-cf2a-45cb-a99f-7343afb296b4"),
                            Nombre = "Usuario cocinero 1"
                        },
                        new
                        {
                            Id = new Guid("76084be0-b170-44e8-a302-a4b7b34927d6"),
                            Nombre = "Usuario cocinero 2"
                        });
                });

            modelBuilder.Entity("Joseco.Outbox.Contracts.Model.OutboxMessage<Catering.Domain.Abstractions.DomainEvent>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("outboxId");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("correlationId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit")
                        .HasColumnName("processed");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("processedOn");

                    b.Property<string>("SpanId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("spanId");

                    b.Property<string>("TraceId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("traceId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outboxMessage", "outbox");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.ComidaStoredModel", b =>
                {
                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.ClienteStoredModel", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente");

                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.ContratoStoredModel", "Contrato")
                        .WithMany()
                        .HasForeignKey("IdContrato");

                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.OrdenTrabajoStoredModel", "OrdenTrabajo")
                        .WithMany("Comidas")
                        .HasForeignKey("IdOrdenTrabajo");

                    b.Navigation("Cliente");

                    b.Navigation("Contrato");

                    b.Navigation("OrdenTrabajo");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.ContratoEntregaCanceladaStoredModel", b =>
                {
                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.ContratoStoredModel", "Contrato")
                        .WithMany("EntregasCanceladas")
                        .HasForeignKey("IdContrato")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contrato");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.ContratoStoredModel", b =>
                {
                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.ClienteStoredModel", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.PlanAlimentarioStoredModel", "PlanAlimentario")
                        .WithMany()
                        .HasForeignKey("IdPlanAlimentario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("PlanAlimentario");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.OrdenTrabajoClienteStoredModel", b =>
                {
                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.ClienteStoredModel", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.ContratoStoredModel", "Contrato")
                        .WithMany()
                        .HasForeignKey("IdContrato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.OrdenTrabajoStoredModel", "OrdenTrabajo")
                        .WithMany("Clientes")
                        .HasForeignKey("IdOrdenTrabajo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Contrato");

                    b.Navigation("OrdenTrabajo");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.OrdenTrabajoStoredModel", b =>
                {
                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.RecetaStoredModel", "Receta")
                        .WithMany()
                        .HasForeignKey("IdReceta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.UsuarioStoredModel", "UsuarioCocinero")
                        .WithMany()
                        .HasForeignKey("IdUsuarioCocinero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receta");

                    b.Navigation("UsuarioCocinero");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.PlanAlimentarioRecetaStoredModel", b =>
                {
                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.PlanAlimentarioStoredModel", "PlanAlimentario")
                        .WithMany("Recetas")
                        .HasForeignKey("IdPlanAlimentario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.RecetaStoredModel", "Receta")
                        .WithMany()
                        .HasForeignKey("IdReceta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanAlimentario");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.RecetaIngredienteStoredModel", b =>
                {
                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.IngredienteStoredModel", "Ingrediente")
                        .WithMany()
                        .HasForeignKey("IdIngrediente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.RecetaStoredModel", "Receta")
                        .WithMany("Ingredientes")
                        .HasForeignKey("IdReceta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingrediente");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.RecetaInstruccionStoredModel", b =>
                {
                    b.HasOne("Catering.Infrastructure.StoredModel.Entities.RecetaStoredModel", "Receta")
                        .WithMany("Instrucciones")
                        .HasForeignKey("IdReceta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.ContratoStoredModel", b =>
                {
                    b.Navigation("EntregasCanceladas");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.OrdenTrabajoStoredModel", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Comidas");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.PlanAlimentarioStoredModel", b =>
                {
                    b.Navigation("Recetas");
                });

            modelBuilder.Entity("Catering.Infrastructure.StoredModel.Entities.RecetaStoredModel", b =>
                {
                    b.Navigation("Ingredientes");

                    b.Navigation("Instrucciones");
                });
#pragma warning restore 612, 618
        }
    }
}
